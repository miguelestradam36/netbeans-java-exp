package tarea_java;

import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Scanner;
import java.util.Random;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;

public class interfaz_juego extends javax.swing.JFrame {

    clase_jugadores jugador_1 = new clase_jugadores();
    clase_jugadores jugador_automatico = new clase_jugadores();

    public interfaz_juego() {
        initComponents();
        jButtonDatosJ2.setEnabled(false);
        jButtonGuardar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldNombre1 = new javax.swing.JTextField();
        jNacionalidad1 = new javax.swing.JTextField();
        jButtonDatosJ1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldNombre2 = new javax.swing.JTextField();
        jNacionalidad2 = new javax.swing.JTextField();
        jButtonDatosJ2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de clase_jugadores");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Jugador 1"));

        jButtonDatosJ1.setText("Aceptar");
        jButtonDatosJ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDatosJ1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre:");

        jLabel3.setText("País:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 183, Short.MAX_VALUE)
                .addComponent(jButtonDatosJ1)
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldNombre1)
                    .addComponent(jNacionalidad1, 0, 147, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNacionalidad1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDatosJ1)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Jugador 2"));

        jButtonDatosJ2.setText("Aceptar");
        jButtonDatosJ2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDatosJ2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre:");

        jLabel4.setText("País:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jNacionalidad2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNombre2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonDatosJ2)
                .addGap(56, 56, 56))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNombre2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNacionalidad2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jButtonDatosJ2)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(181, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonGuardar)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButtonGuardar)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) 
    {
                                    int win;
                                    String[] puntajes = new String[3];
                                    Scanner input; 
                                    int indexar_normal;
                                    int indexar_especial;
                                    String currentColor;
                                    int tipo_de_Carta;
                                    int vigilante;
                                    gameLoop:
                                    while (true)
                                    {
                                        win = 0;
                                        diferentes_cartas tmp = new diferentes_cartas();
                                        diferentes_cartas.Carta_especial topCardespecial = tmp.new Carta_especial();
                                        diferentes_cartas.Carta_normal topCardnormal = tmp.new Carta_normal();
                                        Random randi = new Random();
                                        int selector;
                                        selector = randi.nextInt(51);
                                        if (selector > 40){
                                            currentColor = topCardespecial.color;
                                            tipo_de_Carta = 0;
                                        }
                                        else{
                                            currentColor = topCardnormal.color;
                                            tipo_de_Carta = 1;
                                        }

                                        System.out.println("\nWelcome to Uno! Initialising decks...\n");

                                        for (int i = 0; i < 5; i++)
                                        {
                                            selector = randi.nextInt(51);  
                                            if (selector > 40)
                                            {
                                                recoger_especial(1,jugador_1.mazo_especial);
                                            }
                                            else
                                            {
                                                recoger_normal(1, jugador_1.mazo_normal);
                                            }
                                        }
                                        for (int i = 0; i < 5; i++)
                                        {
                                            selector = randi.nextInt(51);  
                                            if (selector > 40)
                                            {
                                                recoger_especial(1,jugador_automatico.mazo_especial);
                                            }
                                            else
                                            {
                                                recoger_normal(1, jugador_automatico.mazo_normal);
                                            }
                                        }
                                        int turno = 0;
                                        vigilante = 0;
                                        for (boolean playersTurn = true; win == 0; playersTurn ^= true)
                                        {
                                            if (playersTurn)
                                            {
                                                turno++;
                                                System.out.println("\nEs el turno del jugador activo: ");
                                                int cartastotal = jugador_1.mazo_normal.size() + jugador_1.mazo_especial.size() ;
                                                System.out.println("Soy el jugador: " + jugador_1.nombre + " y este es mi turno numero: " + String.valueOf(turno) +"! Tengo un total de: " + String.valueOf(cartastotal ) + " cartas restantes!" + ((cartastotal == 1) ? "...Uno!":"") );
                                                System.out.print("\nActualmente si desea utilizar las cartas normales que posee estas serian sus opciones:\n");
                                                for (indexar_normal = 0; indexar_normal < jugador_1.mazo_normal.size(); indexar_normal++)
                                                {
                                                    System.out.print(String.valueOf(indexar_normal + 1) + ". " + ((diferentes_cartas.Carta_normal) jugador_1.mazo_normal.get(indexar_normal) ).Imprimir_valor() + "\n");
                                                }
                                                System.out.print("\nActualmente si desea utilizar las cartas especiales que posee estas serian sus opciones:\n");
                                                for (indexar_especial = 0; indexar_especial < jugador_1.mazo_especial.size(); indexar_especial++)
                                                {                                                
                                                    System.out.print(String.valueOf(indexar_especial + 1) + ". " + ((diferentes_cartas.Carta_especial) jugador_1.mazo_especial.get(indexar_especial) ).Imprimir_valor() + "\n");
                                                }

                                                System.out.print("\nDesea esocger normales (1) o especiales (0), escriba 0 o 1 segun su elección (puede escoger 2 si desea tomar una carta): ");
                                                int opcion;
                                                input = new Scanner(System.in);
                                                opcion = input.nextInt();
                                                if (opcion == 1)
                                                { 
                                                        System.out.print("\nIntroduzca el indice presentado de la carta normal que quiere escoger");
                                                        int opcion_ = input.nextInt();
                                                        topCardnormal = (diferentes_cartas.Carta_normal) jugador_1.mazo_normal.get(opcion_ - 1);
                                                        jugador_1.mazo_normal.remove(opcion_ - 1);
                                                        currentColor = topCardnormal.color;
                                                        System.out.println("He escogido y puesto la carta: " + topCardnormal.Imprimir_valor() + " !\n");     
                                                }
                                                else if (opcion == 0)
                                                {    
                                                    switch (topCardespecial.color)
                                                    {
                                                        case "Arcoiris":                         
                                                        do // Repeats every time the user doesn't input a valid color
                                                        {
                                                            System.out.print("\nEnter the color you want: ");
                                                            input = new Scanner(System.in);
                                                        } while (!input.hasNext("R..|r..|G....|g....|B...|b...|Y.....|y.....") ); //Something I learned recently
                                                        if (input.hasNext("R.....|r.....") )
                                                            currentColor = "Rosado";
                                                        else if (input.hasNext("G...|g...") )
                                                            currentColor = "Gris";
                                                        else if (input.hasNext("C...|c...") )
                                                            currentColor = "Café";
                                                        else if (input.hasNext("B.....|b.....") )
                                                            currentColor = "Blanco";

                                                        System.out.println("You chose " + currentColor);
                                                        break;
                                                    }                                                 
                                                }
                                                else if (opcion == 2)
                                                {
                                                 recoger_normal(1, jugador_1.mazo_normal);   
                                                }
                                                else{break;}
                                        }
                                            else
                                            {
                                                int cartastotal = jugador_automatico.mazo_normal.size() + jugador_automatico.mazo_especial.size() ;
                                                System.out.println("Soy el jugador: " + jugador_automatico.nombre + " y este es mi turno numero: " + String.valueOf(turno) +"! Tengo un total de: " + String.valueOf(cartastotal ) + " cartas restantes!" + ((cartastotal == 1) ? "...Uno!":"") );
                                                for (indexar_normal = 0; indexar_normal < jugador_automatico.mazo_normal.size(); indexar_normal++)
                                                {
                                                    if (tipo_de_Carta == 1){
                                                        if ( ((diferentes_cartas.Carta_normal) jugador_automatico.mazo_normal.get(indexar_normal)).canPlace(topCardnormal, currentColor) )
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else{
                                                        if ( ((diferentes_cartas.Carta_normal) jugador_automatico.mazo_normal.get(indexar_normal)).canPlace(topCardespecial, currentColor) )
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                                for (indexar_especial = 0; indexar_especial < jugador_automatico.mazo_especial.size(); indexar_especial++)
                                                {
                                                    if (tipo_de_Carta == 1){
                                                        if ( ((diferentes_cartas.Carta_especial) jugador_automatico.mazo_especial.get(indexar_especial)).canPlace(topCardnormal, currentColor) )
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else{
                                                        if ( ((diferentes_cartas.Carta_especial) jugador_automatico.mazo_especial.get(indexar_especial)).canPlace(topCardespecial, currentColor) )
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (indexar_normal < jugador_automatico.mazo_normal.size())
                                                    {
                                                        topCardnormal = (diferentes_cartas.Carta_normal) jugador_automatico.mazo_normal.get(indexar_normal);
                                                        jugador_automatico.mazo_normal.remove(indexar_normal);
                                                        currentColor = topCardnormal.color;
                                                        System.out.println("He escogido y puesto la carta: " + topCardnormal.Imprimir_valor() + " !\n");
                                                    }
                                                else if (indexar_especial < jugador_automatico.mazo_especial.size())
                                                    {
                                                        topCardespecial = (diferentes_cartas.Carta_especial) jugador_automatico.mazo_especial.get(indexar_especial);
                                                        jugador_automatico.mazo_especial.remove(indexar_especial);
                                                        currentColor = topCardespecial.color;
                                                        System.out.println("He escogido y puesto la carta: " + topCardespecial.Imprimir_valor() + " !\n");
                                                    }
                                                else{
                                                        System.out.println("No puedo colocar ninguna de mis cartas.... \n");
                                                        vigilante++;
                                                        if (vigilante > 6)
                                                        {
                                                            win = 2;
                                                            break;                           
                                                        }
                                                    }
                                                puntajes[0] ="Jugador " + jugador_1.nombre + ": " + String.valueOf(jugador_1.puntos);
                                                puntajes[1] ="Jugador " + jugador_automatico.nombre + ": " + String.valueOf(jugador_automatico.puntos);
                                                if (jugador_1.puntos > jugador_automatico.puntos)
                                                {
                                                    puntajes[2] ="Ganador: " + jugador_1.nombre;  
                                                }
                                                else
                                                {
                                                    puntajes[2] ="Ganador: " + jugador_automatico.nombre;
                                                }
                                                if (jugador_1.mazo_normal.size() == 0 )
                                                {
                                                    if (jugador_1.mazo_especial.size() == 0 )
                                                    {
                                                        win = 1;
                                                    }
                                                }
                                                else if (jugador_automatico.mazo_normal.size() == 0)
                                                {
                                                    if (jugador_automatico.mazo_especial.size() == 0)
                                                    {
                                                        win = -1;
                                                    }
                                                }
                                                if (turno == 3)
                                                {
                                                    int cartasjugador1 = jugador_1.mazo_normal.size() + jugador_1.mazo_especial.size();
                                                    int cartasjugador2 = jugador_automatico.mazo_normal.size() + jugador_automatico.mazo_especial.size();
                                                    if (cartasjugador1 < cartasjugador2)
                                                    {
                                                        jugador_1.puntos += 10;
                                                    }
                                                    else if (cartasjugador1 > cartasjugador2)
                                                    {
                                                        jugador_automatico.puntos += 10;
                                                    }
                                                    else
                                                    {
                                                        jugador_automatico.puntos += 5;
                                                        jugador_1.puntos += 5;
                                                    }
                                                    System.out.print("\nDesea seguir jugando esta partida (n/y)? ");
                                                    input = new Scanner(System.in);

                                                    if (input.next().toLowerCase().contains("n") ){
                                                        System.out.print("\nDesea jugar otra partida (n/y)? ");
                                                        input = new Scanner(System.in);
                                                        if (input.next().toLowerCase().contains("n") )
                                                        {
                                                            win = 3;
                                                            break;                            
                                                        }
                                                        win = 0;
                                                        break;
                                                    }  
                                                }
                                                if (vigilante == 6)
                                                {
                                                    win = 2;
                                                    break;
                                                }
                                            }
                                        }
                                        if (win == 1)
                                        {
                                            System.out.println(jugador_1.nombre + " ha ganado la partida de uno!\n");
                                            try{
                                                ArrayList<binario> lista = new ArrayList<binario>();
                                                lista.add(new binario(puntajes[0],puntajes[1],puntajes[2]));
                                                serializar(lista);
                                                for (binario entry : deserializar()) 
                                                {
                                                    System.out.println(entry);
                                                }
                                            }
                                            catch(Exception a)
                                            {
                                                System.out.println("\nTodos los datos han sido obtenidos. En caso de que no haya sido mostrado ninguno, la base de datos no ha sido creada todavía");
                                            }
                                            System.out.println("\nSe han registrado en el archivo puntajes.dat los siguientes datos como una nueva entrada: ");
                                            break;
                                        }
                                        else if (win == 2)
                                        {
                                            try{
                                                System.out.println("Se ha llegado a un punto muerto debido a que no es posible agregar más cartas.");
                                                ArrayList<binario> lista = new ArrayList<binario>();
                                                lista.add(new binario(puntajes[0],puntajes[1],puntajes[2]));
                                                serializar(lista);
                                                for (binario entry : deserializar()) 
                                                {
                                                    System.out.println(entry);
                                                }  
                                            }
                                            catch(Exception a)
                                            {
                                                System.out.println("\nTodos los datos han sido obtenidos. En caso de que no haya sido mostrado ninguno, la base de datos no ha sido creada todavía");
                                            }
                                            System.out.println("\nSe han registrado en el archivo puntajes.dat los siguientes datos como una nueva entrada: ");              
                                            break;
                                        }
                                        else if (win == 3)
                                        {
                                            try{
                                                System.out.println("El jugador ya no desea jugar más.");
                                                ArrayList<binario> lista = new ArrayList<binario>();
                                                lista.add(new binario(puntajes[0],puntajes[1],puntajes[2]));
                                                serializar(lista);
                                                for (binario entry : deserializar()) 
                                                {
                                                    System.out.println(entry);
                                                }  
                                            }
                                            catch(Exception a)
                                            {
                                                System.out.println("\nTodos los datos han sido obtenidos. En caso de que no haya sido mostrado ninguno, la base de datos no ha sido creada todavía");
                                            }
                                            System.out.println("\nSe han registrado en el archivo puntajes.dat los siguientes datos como una nueva entrada: ");
                                            break;
                                        }
                                        else if (win == -1)
                                        {
                                            try{
                                                System.out.println(jugador_automatico.nombre + " ha ganado la partida de uno!\n");
                                                ArrayList<binario> lista = new ArrayList<binario>();
                                                lista.add(new binario(puntajes[0],puntajes[1],puntajes[2]));
                                                serializar(lista);
                                                for (binario entry : deserializar()) 
                                                {
                                                    System.out.println(entry);
                                                }  
                                            }
                                            catch(Exception a)
                                            {
                                                System.out.println("\nTodos los datos han sido obtenidos. En caso de que no haya sido mostrado ninguno, la base de datos no ha sido creada todavía");
                                            }
                                            System.out.println("\nSe han registrado en el archivo puntajes.dat los siguientes datos como una nueva entrada: ");
                                            break;
                                        }
                                    }
    }

    private void jButtonDatosJ1ActionPerformed(java.awt.event.ActionEvent evt) {
            jugador_1.setName(jTextFieldNombre1.getText().trim());
            jugador_1.setNationality(jNacionalidad1.getText().trim());
            jButtonDatosJ2.setEnabled(true);
            jButtonDatosJ1.setEnabled(false);
    }

    private void jButtonDatosJ2ActionPerformed(java.awt.event.ActionEvent evt) {
            jugador_automatico.setName(jTextFieldNombre2.getText().trim());
            jugador_automatico.setNationality(jNacionalidad2.getText().trim());
            jButtonDatosJ2.setEnabled(false);
            jButtonGuardar.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz_juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz_juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz_juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz_juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() {
                new interfaz_juego().setVisible(true);
            }
        });
    }
    
    public static ArrayList<binario> deserializar() 
    {
        ArrayList<binario> biblioteca = new ArrayList<binario>();
        try
        {
            FileInputStream fis = new FileInputStream("Puntaje.dat");
            ObjectInputStream ois = new ObjectInputStream(fis);
            biblioteca = (ArrayList) ois.readObject();
            ois.close();
            fis.close();
        } 
        catch (IOException ioe) 
        {
            System.out.println("Error en la apertura del archivo.");

        } 
        catch (ClassNotFoundException c) 
        {
            System.out.println("No hemos encontrado la clase de binario...");

        }
        return biblioteca;
    }
    
    public static void serializar(ArrayList<binario> lista) 
    {
        try
        {
            FileOutputStream fos = new FileOutputStream("Puntaje.dat");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(lista);
            oos.close();
            fos.close();
        } 
        catch (IOException ioe) 
        {
            System.out.println("Error al serializar sus datos guardados en el archivo .dat");
        }
    }
    
    public static void recoger_especial(int cards, ArrayList<diferentes_cartas.Carta_especial> deck)
    {
        for (int i = 0; i < cards; i++)
        {
            diferentes_cartas pre = new diferentes_cartas();
            diferentes_cartas.Carta_especial carta_azar = pre.new Carta_especial();
            deck.add(carta_azar);
        }
    }
    
    public static void recoger_normal(int cards, ArrayList<diferentes_cartas.Carta_normal> deck)
    {
        for (int i = 0; i < cards; i++)
        {
            diferentes_cartas pre = new diferentes_cartas();
            diferentes_cartas.Carta_normal carta_azar = pre.new Carta_normal();
            deck.add(carta_azar);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDatosJ1;
    private javax.swing.JButton jButtonDatosJ2;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JTextField jNacionalidad1;
    private javax.swing.JTextField jNacionalidad2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldNombre1;
    private javax.swing.JTextField jTextFieldNombre2;
}